#\!/bin/bash

# Git Monkey v4 - Main CLI Router
# Copyright (c) 2025 Pablo Alvarado
# See LICENSE file for terms

# Load utilities
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PARENT_DIR="$(dirname "$DIR")"
source "$PARENT_DIR/utils/command_tracker.sh"
source "$PARENT_DIR/utils/profile.sh"
source "$PARENT_DIR/utils/identity.sh"
source "$PARENT_DIR/utils/performance.sh"
source "$PARENT_DIR/utils/style.sh"
source "$PARENT_DIR/utils/ascii_art.sh"  # Added ASCII art utilities

COMMAND=$1
shift

# Get user profile information
TONE_STAGE=$(get_tone_stage)
THEME=$(get_selected_theme)
IDENTITY=$(get_full_identity)

# Check if this is the first run
FIRST_RUN=false
if [ \! -f "$HOME/.gitmonkey/welcomed" ]; then
  FIRST_RUN=true
fi

# Show welcome screen on first run or when explicitly requested
if [ "$FIRST_RUN" = true ] && [ "$COMMAND" \!= "welcome" ]; then
  # First time running Git Monkey, show welcome
  "$PARENT_DIR/commands/welcome.sh"
  # If no command specified, exit after welcome (otherwise continue to requested command)
  if [ -z "$COMMAND" ]; then
    exit 0
  fi
elif [ "$COMMAND" = "welcome" ]; then
  # Explicitly requested welcome
  "$PARENT_DIR/commands/welcome.sh" --reset
  exit 0
fi

# Show greeting for direct command invocation (not help/version/welcome)
if [ -n "$COMMAND" ] && [ "$COMMAND" \!= "help" ] && [ "$COMMAND" \!= "version" ] && [ "$COMMAND" \!= "welcome" ]; then
  # Use our improved greeting system that's identity and theme aware
  display_greeting "$THEME"  # Using new themed greeting system
  
  # Track the command execution for tone stage advancement
  if [ "$COMMAND" \!= "settings" ] && [ "$COMMAND" \!= "identity" ] && [ "$COMMAND" \!= "title" ]; then
    increment_command_usage "$COMMAND"
  fi
fi

case "$COMMAND" in
  welcome)
    "$PARENT_DIR/commands/welcome.sh" "$@"
    ;;
  alias)
    "$PARENT_DIR/commands/alias.sh" "$@"
    ;;
  clone)
    "$PARENT_DIR/commands/clone.sh" "$@"
    ;;
  branch)
    "$PARENT_DIR/commands/branch.sh" "$@"
    ;;
  stash)
    "$PARENT_DIR/commands/stash.sh" "$@"
    ;;
  push)
    "$PARENT_DIR/commands/push.sh" "$@"
    ;;
  undo)
    "$PARENT_DIR/commands/undo.sh" "$@"
    ;;
  tips)
    "$PARENT_DIR/commands/tips.sh" "$@"
    ;;
  learn)
    "$PARENT_DIR/commands/learn.sh" "$@"
    ;;
  tutorial|school)
    "$PARENT_DIR/commands/tutorial.sh" "$@"
    ;;
  worktree|worktree:*)
    "$PARENT_DIR/commands/worktree.sh" "$@"
    ;;
  generate)
    "$PARENT_DIR/commands/generate.sh" "$@"
    ;;
  open)
    "$PARENT_DIR/commands/open.sh" "$@"
    ;;
  fix)
    "$PARENT_DIR/commands/fix.sh" "$@"
    ;;
  conflict|resolve)
    "$PARENT_DIR/commands/conflict.sh" "$@"
    ;;
  history|log)
    "$PARENT_DIR/commands/history.sh" "$@"
    ;;
  cheatsheet|cheat|reference)
    "$PARENT_DIR/commands/cheatsheet.sh" "$@"
    ;;
  ask)
    "$PARENT_DIR/commands/ask.sh" "$@"
    ;;
  commit)
    "$PARENT_DIR/commands/commit.sh" "$@"
    ;;
  merge)
    "$PARENT_DIR/commands/merge.sh" "$@"
    ;;
  pivot)
    # For pivot, we need to evaluate the output to change directory
    eval "$("$PARENT_DIR/commands/pivot.sh" "$@")"
    ;;
  return)
    # For return, we need to evaluate the output to change directory
    eval "$("$PARENT_DIR/commands/return.sh" "$@")"
    ;;
  whoami)
    "$PARENT_DIR/commands/whoami.sh" "$@"
    ;;
  title)
    "$PARENT_DIR/commands/title.sh" "$@"
    ;;
  identity)
    "$PARENT_DIR/commands/identity.sh" "$@"
    ;;
  wizard)
    "$PARENT_DIR/commands/wizard.sh" "$@"
    ;;
  settings)
    "$PARENT_DIR/commands/settings.sh" "$@"
    ;;
  settings-ai)
    "$PARENT_DIR/commands/settings_ai.sh" "$@"
    ;;
  theme)
    # Direct route to theme manager
    "$PARENT_DIR/utils/theme_manager.sh" "$@"
    ;;
  visualize)
    "$PARENT_DIR/commands/visualize.sh" "$@"
    ;;
  schema)
    "$PARENT_DIR/commands/schema.sh" "$@"
    ;;
  start)
    "$PARENT_DIR/commands/start.sh" "$@"
    ;;
  help-ai)
    "$PARENT_DIR/commands/help_ai.sh" "$@"
    ;;
  version)
    echo "Git Monkey v4.2.0"
    ;;
  help)
    # Use our new help command
    "$PARENT_DIR/commands/help.sh" "$@"
    ;;
  --help|-h)
    # Route legacy help flags to help command
    "$PARENT_DIR/commands/help.sh" "$@"
    ;;
  legacy-help)
    echo "üêí Git Monkey CLI - The chillest way to Git"
    echo ""
    echo "Available commands:"
    echo "  gitmonkey welcome    - Run the welcome and onboarding experience"
    echo "  gitmonkey alias      - Install helpful Git aliases"
    echo "  gitmonkey clone      - Clone a repository with guidance"
    echo "  gitmonkey branch     - Create or manage branches"
    echo "  gitmonkey stash      - Stash your changes for later"
    echo "  gitmonkey push       - Push with automatic upstream tracking"
    echo "  gitmonkey undo       - Undo mistakes safely"
    echo "  gitmonkey ask        - Get AI-powered Git help"
    echo "  gitmonkey commit     - Generate AI-assisted commit messages"
    echo "  gitmonkey merge      - Analyze merge risks with AI"
    echo "  gitmonkey worktree   - Work on multiple branches at once"
    echo "  gitmonkey pivot      - Quick context switching with auto-stashing"
    echo "  gitmonkey return     - Return to previous context"
    echo "  gitmonkey whoami     - Show your current Git context"
    echo "  gitmonkey title      - View and manage your Git Monkey titles"
    echo "  gitmonkey identity   - Configure your personalized identity"
    echo "  gitmonkey theme      - Select and preview theme options"
    echo "  gitmonkey generate   - Generate code and components"
    echo "  gitmonkey open       - Open projects in your preferred editor"
    echo "  gitmonkey fix        - Fix common development issues"
    echo "  gitmonkey conflict   - Interactive merge conflict resolution"
    echo "  gitmonkey history    - Visualize and navigate Git history"
    echo "  gitmonkey cheatsheet - Quick reference for Git commands"
    echo "  gitmonkey learn      - Learn Git concepts and Git Monkey features"
    echo "  gitmonkey tutorial   - Interactive Git tutorials"
    echo "  gitmonkey tips       - Show helpful Git tips"
    echo "  gitmonkey wizard     - Access advanced Git features"
    echo "  gitmonkey settings   - Customize your Git Monkey experience"
    echo "  gitmonkey settings-ai- Configure AI providers and settings"
    echo "  gitmonkey version    - Show current version"
    echo "  gitmonkey help       - Show this help message"
    echo ""
    echo "Running without a command opens the interactive menu."
    echo ""
    echo "üí° Try: gitmonkey worktree:add <branch> to start using worktrees\!"
    ;;
  *)
    "$PARENT_DIR/commands/menu.sh"
    ;;
esac
